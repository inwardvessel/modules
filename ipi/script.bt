#!/usr/bin/env bpftrace

#include <linux/smp.h>
#include <linux/threads.h>
#include <linux/types.h>

tracepoint:ipi:ipi_send_cpu
/args.callback == kaddr("generic_smp_call_function_single_interrupt")/
{
	@sent[args.cpu] = nsecs;
}

tracepoint:ipi:ipi_send_cpumask
{
	//printf("send cpumask:%lu, callsite:%s, callback:%s\n",
	//	args.cpumask, ksym(args.callsite), ksym(args.callback));
	//@sent[args.cpumask, args.callback] = count();
}

kfunc:generic_smp_call_function_single_interrupt
/@sent[cpu]/
{
	$t1 = nsecs;
	$t0 = @sent[cpu];
	$dt = $t1 - $t0;
	delete(@sent[cpu]);
	@recv_latency = hist($dt);
	@dispatch[cpu] = $t1;
}

kretfunc:generic_smp_call_function_single_interrupt
/@dispatch[cpu]/
{
	$t1 = nsecs;
	$t0 = @dispatch[cpu];
	$dt = $t1 - $t0;
	delete(@dispatch[cpu]);
	@dispatch_latency = hist($dt);
}

tracepoint:csd:csd_function_entry
/@dispatch[cpu]/
{
	@start_csd_func[cpu] = nsecs;
}

tracepoint:csd:csd_function_exit
/@start_csd_func[cpu]/
{
	$t1 = nsecs;
	$t0 = @start_csd_func[cpu];
	$dt = $t1 - $t0;
	delete(@start_csd_func[cpu]);
	@csd_func_latency[ksym(args.func)] = hist($dt);
}

END
{
	clear(@sent);
}
